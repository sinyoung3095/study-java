프로그램 : 실행이 안된 상태.

프로세스 : 실행중인 프로그램.

쓰레드

		프로세스 내의 작업 처리 경로

		- 싱글 쓰레드(단일 쓰레드)

				처리경로를 한개만 가지고 있기 때문에 직렬적이다.
				한 번에 하나씩 처리하기 떄문에 상대적으로 비효율적이지만
				하나의 작업에 문제가 발생하더라고 다른 작업은 시작하지 않았기 때문에
				다른 작업에는 문제가 발생하지 않는다. 따라서 안정성이 보장된다.
				또한 멀티 쓰레드에 비해 설계가 쉽다.

		- 멀티 쓰레드(다중 쓰레드)

				하나의 프로세스를 동시에 처리하는 것처럼 보이지만 사실은 매우 짧은 단위로 분할해서 차례로 처리한다.
				여러 개의 처리 경로를 가질 수 있도록 하며, 동시 작업이 가능해진다.
				하나의 쓰레드 문제 발생 시, 모든 쓰레드에 문제가 발생하게 되지만 멀티 쓰레드로 설계한다면,
				처리량 증가, 효율성 증가, 생산성 증가의 장점이 있기 때문에 이러한 단점을 감수하고 설계하는 편이다.
--------------------------------------------------------------------------------------------------------------------------------------------------------
멀티 쓰레드 구현 방법

		핵심 : run() 메소드 재정의
		
		1. Thread 클래스 상속
				run() 메소드를 재정의하여 자원을 구성하고
				해당 객체에서 부모(Thread)의 start()를 사용하여 스케쥴링 한다.

		2.Runnable 인터페이스 구현
				run() 메소드를 구현하여 자원을 구성하고
				해당 객체를 Thread 생성자에 전달하여 Thread 객체로 start()를 사용한다.

		※ extends는 단 한 번만 사용할 수 있기 때문에, 보통 Runnable을 구현하여 멀티 쓰레드 환경을 구축한다.
		   이 때, Runnable은 함수형 인터페이스이기 때문에 run() 메소드를 람다로 구현하여 사용 할수 있다.

동기화(Synchronized)

		하나의 쓰레드가 자원에 접근 중일 때 다른 쓰레드가 동시에 같은 자원을 접근하지 못하게 막는 것.
		자원 공유 시 연산을 건너뛰는 문제가 발생한다. 
		이를 자원 공유 문제라 부르고, 동기화 통해 이 문제를 해결할 수 있다.

동기화 문법

		-  블록

				synchtonized(mutex){
						· · ·
				}
			
				영역 전체에 동기화 걸린다.
				※  mutex는 문이고, 이 문에 들어오는 쓰레드는 lock 상태에 돌입한다.
				    해당 자원을 모두 사용하면(코드 모두 실행 후) lock을 해제하고 다음 쓰레드가 들어온다.

		- 키워드

				synchtonized
				
				메소드 리턴 타입 앞에 작성하면, 해당 메소드가 전체 동기화에 걸린다.

--------------------------------------------------------------------------------------------------------------------------------------------------------
String

		새로운 문자열 상수를 대입할 때마다, 동일한 문자열이 없다면 Constant pool에 객체가 생성된다.
		만약 + 연산으로 문자열을 바복해서 연결하게 되면 그만큼의 객체가 생성되기 때문에
		메모리 비용을 많이 발생시킨다.

StringBuilder

		하나의 객체를 생성한 뒤 append() 메소드에 연결할 문자열을 전달하는 방식으로 사용한다.
		매번 객체가 생성되지 않고, 하나의 객체만으로 문자열을 연결시키므로
		직접 + 연산자를 사용하는 것보다 메모리 비용을 상당히 감소시킬 수 있다.
		완성된 문자열은 toString()메소드로 확인할 수 있다.

StringBuffer

		StringBuilder와 마찬가지로 하나의 객체만으로 문자열을 연결시킨다.
		내부적으로 동기화 코드가 포함되어 있기 때문에 단일 쓰레드에서는 오히려
		속도가 저하되므로 잘 사용하지 않는다.
		하지만 멀티 쓰레드 환경에서는 매번 동기화 블록을 감쌀 필요가 없기 때문에 편하고
		StrinfBuilder(JDK5부터 등장)가 없었을 때 StringBuffer만 존재 했으므로
		오래된 코드나 라이브러리들은 여전히 StringBuffer를 사용하고 있을 수 있다.
























		
